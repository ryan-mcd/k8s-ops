
---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: harbor
  namespace: development
spec:
  interval: 30m
  chart:
    spec:
      chart: harbor
      version: 1.14.0
      sourceRef:
        kind: HelmRepository
        name: harbor
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    expose:
      # Use Istio
      type: clusterIP
      tls:
        enabled: false
        certSource: none
      # Default Values
      ClusterIP:
        name: harbor
        ports:
          httpPort: 80
          httpsPort: 443
      ingress:
        hosts:
          # notary: disabled value
          core: registry.${DOMAIN_1}
    externalURL: https://registry.${DOMAIN_1}

    internalTLS:
      enabled: false

    persistence:
      enabled: true
      persistentVolumeClaim:
        registry:
          existingClaim: harbor-registry
          storageClass: "${STORAGE_CLASS_2}"
          subPath: registry
      imageChartStorage:
        type: filesystem

    harborAdminPassword: "${HARBOR_ADMIN_PASSWORD}"
    secretKey: "${HARBOR_ENCRYPTION_KEY}"

    core:
      # # Secret is used when core server communicates with other components.
      # # If a secret key is not specified, Helm will generate one.
      # # Must be a string of 16 chars.
      secret: "${HARBOR_CORE_SECRET}"
      # # Fill the name of a kubernetes secret if you want to use your own
      # # TLS certificate and private key for token encryption/decryption.
      # # The secret must contain keys named:
      # # "tls.key" - the private key
      # # "tls.crt" - the certificate
      # secretName: ""
      # # If not specifying a preexisting secret, a secret can be created from tokenKey and tokenCert and used instead.
      # # If none of secretName, tokenKey, and tokenCert are specified, an ephemeral key and certificate will be autogenerated.
      # # tokenKey and tokenCert must BOTH be set or BOTH unset.
      # # The tokenKey value is formatted as a multiline string containing a PEM-encoded RSA key, indented one more than tokenKey on the following line.
      # tokenKey: |
      # # If tokenKey is set, the value of tokenCert must be set as a PEM-encoded certificate signed by tokenKey, and supplied as a multiline string, indented one more than tokenCert on the following line.
      # tokenCert: |
      # # The XSRF key. Will be generated automatically if it isn't specified
      # xsrfKey: ""
    redis:
      type: internal
    database:
      type: internal
      internal:
        password: "${HARBOR_POSTGRES_PASSWORD}"

    notary:
      enabled: false
    chartmuseum:
      enabled: false
    trivy:
      enabled: false

    # ## TODO: Investigate later
    metrics:
      enabled: false
    trace:
      enabled: false